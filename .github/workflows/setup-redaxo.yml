name: Setup REDAXO

on:
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout des Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # 2. PHP Umgebung einrichten
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: zip, curl, gd

      # 3. Node.js installieren
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 4. Yarn installieren
      - name: Install Yarn
        run: |
          sudo apt-get update
          sudo apt-get install -y yarn

      # 5. Setup Dateien herunterladen
      - name: Download setup files from yakamara/yak
        run: |
          SETUP_URL="https://raw.githubusercontent.com/yakamara/yak/main/setup"
          mkdir -p setup
          curl -Ls "$SETUP_URL/setup.ini" -o setup/setup.ini
          curl -Ls "$SETUP_URL/addon.project.boot.php" -o setup/addon.project.boot.php
          curl -Ls "$SETUP_URL/console" -o setup/console
          curl -Ls "$SETUP_URL/index.backend.php" -o setup/index.backend.php
          curl -Ls "$SETUP_URL/index.frontend.php" -o setup/index.frontend.php
          curl -Ls "$SETUP_URL/AppPathProvider.php" -o setup/AppPathProvider.php

      # 6. ini Modul für Node.js installieren
      - name: Install ini module for Node.js
        run: npm install ini

      # 7. Neuste REDAXO Version ermitteln
      - name: Get latest REDAXO release
        id: get_redaxo_release
        run: |
          RELEASE_URL=$(curl -s "https://api.github.com/repos/redaxo/redaxo/releases/latest" | jq -r ".tag_name")
          echo "::set-output name=redaxo_version::$RELEASE_URL"
          SHA=$(curl -Ls "https://github.com/redaxo/redaxo/releases/download/$RELEASE_URL/redaxo_$RELEASE_URL.zip" | shasum -a 1 | awk '{print $1}')
          echo "::set-output name=redaxo_sha::$SHA"

      # 8. Konfiguration einlesen
      - name: Read and prepare Configuration from setup.ini
        id: config
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const ini = require('ini');
            const configString = fs.readFileSync('./setup/setup.ini', 'utf-8');
            const config = ini.parse(configString);
            core.setOutput('redaxo_version', "${{ steps.get_redaxo_release.outputs.redaxo_version }}");
            core.setOutput('redaxo_sha', "${{ steps.get_redaxo_release.outputs.redaxo_sha }}");

      # 9. Temporäre Verzeichnisse erstellen
      - name: Create temporary directories
        run: |
          mkdir -p tmp/redaxo

      # 10. REDAXO herunterladen
      - name: Download REDAXO
        run: |
          VERSION="${{ steps.get_redaxo_release.outputs.redaxo_version }}"
          SHA="${{ steps.get_redaxo_release.outputs.redaxo_sha }}"
          FILE="tmp/redaxo/redaxo_${VERSION}.zip"
          curl -Ls "https://github.com/redaxo/redaxo/releases/download/${VERSION}/redaxo_${VERSION}.zip" -o "${FILE}"
          echo "File SHA: $(sha1sum ${FILE})"
          if [[ "$(sha1sum ${FILE} | awk '{print $1}')" != "${SHA}" ]]; then
            echo "ERROR: SHA-Hash is incorrect."
            exit 1
          fi

      # 11. REDAXO entpacken
      - name: Unzip REDAXO
        run: |
          VERSION="${{ steps.get_redaxo_release.outputs.redaxo_version }}"
          FILE="tmp/redaxo/redaxo_${VERSION}.zip"
          unzip "${FILE}" -d public

      # 12. Yakamara Ordnerstruktur erstellen
      - name: Create Yakamara file structure
        run: |
          mkdir -p var
          mkdir -p src
          mv public/redaxo/bin/ bin
          mv public/redaxo/cache var/cache
          mv public/redaxo/data var/data
          mv public/redaxo/src/addons src/addons
          mv public/redaxo/src/core src/core
          mv public/LICENSE.md LICENSE.md
          rm public/README.md
          rm public/README.de.md

      # 13. Setup Dateien kopieren
      - name: Copy setup files
        run: |
          cp setup/addon.project.boot.php src/addons/project/boot.php
          cp setup/console bin/console
          cp setup/index.backend.php public/redaxo/index.php
          cp setup/index.frontend.php public/index.php
          cp setup/AppPathProvider.php src/AppPathProvider.php

      # 14. Addons herunterladen und installieren
      - name: Download and Install Addons
        run: |
          while IFS= read -r addon_url; do
            echo "installing addon: $addon_url"
             
            ADDON_NAME=$(echo "$addon_url" | sed -E 's/.*\///g')
             
            ADDON_REAL_NAME=$(echo "$addon_url" | sed -E 's/.*\///g')

            RELEASE_URL="$addon_url/releases/latest"
            echo  "RELEASE_URL: $RELEASE_URL"
            ZIP_URL=$(curl -s -H 'User-Agent: PHP' "$RELEASE_URL" | jq -r '.zipball_url')
            echo  "ZIP_URL: $ZIP_URL"
             
            curl -Ls "$ZIP_URL" -o "tmp/$ADDON_REAL_NAME.zip"
            unzip "tmp/$ADDON_REAL_NAME.zip" -d tmp

            ADDON_DIR=$(find tmp -maxdepth 1 -type d -name "*-${ADDON_REAL_NAME}-*")
            if [[ -n "$ADDON_DIR" ]]; then
                echo "Found addon dir: $ADDON_DIR"
               mv "$ADDON_DIR" "src/addons/$ADDON_NAME"
            else
                echo "Addon directory not found for $ADDON_REAL_NAME"
            fi
             rm "tmp/$ADDON_REAL_NAME.zip"
          done < addons.txt
        shell: bash

      # 15. Google Fonts herunterladen und CSS generieren
      - name: Download Google Fonts and Generate CSS
        run: |
          mkdir -p assets/fonts
          if [ -f fonts.txt ]; then
            echo "@font-face {" > assets/fonts/fonts.css
            while IFS= read -r font_url; do
              echo "Processing font: $font_url"
              
               # Extract font family from URL (needs adjustment based on the URL)
              FONT_FAMILY=$(echo "$font_url" | sed -E 's/.*family=([^&]*)&.*/\1/' | sed 's/\+/ /g')
              if [[ -z "$FONT_FAMILY" ]]; then
                FONT_FAMILY=$(echo "$font_url" | sed -E 's/.*family=([^&]*).*/\1/' | sed 's/\+/ /g')
                 if [[ -z "$FONT_FAMILY" ]]; then
                   echo "Warning: Could not extract font family. Skipping $font_url"
                   continue;
                 fi
              fi
              FONT_FAMILY=$(echo "$FONT_FAMILY" | sed -E 's/%20/ /g')
              
                
               # Use google fonts API to get WOFF2
              GOOGLE_FONTS_API_URL="https://fonts.googleapis.com/css2?family=$(echo "$FONT_FAMILY" | sed 's/ /+/g')&display=swap"
              echo "  API URL: $GOOGLE_FONTS_API_URL"

              FONT_CSS=$(curl -s -H 'User-Agent: Mozilla/5.0' "$GOOGLE_FONTS_API_URL")

              # Extract WOFF2 and WOFF url's
              WOFF2_URL=$(echo "$FONT_CSS" | grep -oP 'url\(([^)]*\.woff2)\)' | grep -oP 'url\(([^)]*)\)' | sed 's/url\((.*)\)/\1/')
              WOFF_URL=$(echo "$FONT_CSS" | grep -oP 'url\(([^)]*\.woff)\)' | grep -oP 'url\(([^)]*)\)' | sed 's/url\((.*)\)/\1/')

              # Download Fonts
              if [[ -n "$WOFF2_URL" ]]; then
                curl -Ls "$WOFF2_URL" -o "assets/fonts/${FONT_FAMILY// /_}.woff2"
              fi
              if [[ -n "$WOFF_URL" ]]; then
                curl -Ls "$WOFF_URL" -o "assets/fonts/${FONT_FAMILY// /_}.woff"
              fi

              # Append @font-face to the css
              echo "@font-face {" >> assets/fonts/fonts.css
              echo "  font-family: '$FONT_FAMILY';" >> assets/fonts/fonts.css
              if [[ -n "$WOFF2_URL" ]]; then
                echo "  src: url('${FONT_FAMILY// /_}.woff2') format('woff2');" >> assets/fonts/fonts.css
              fi
              if [[ -n "$WOFF_URL" ]]; then
                  echo "  src: url('${FONT_FAMILY// /_}.woff') format('woff');" >> assets/fonts/fonts.css
              fi
              echo "  font-weight: normal;" >> assets/fonts/fonts.css
              echo "  font-style: normal;" >> assets/fonts/fonts.css
              echo "}" >> assets/fonts/fonts.css
              echo "" >> assets/fonts/fonts.css

            done < fonts.txt
            echo "}" >> assets/fonts/fonts.css
           else
              echo "No fonts.txt file found. Skipping font download and CSS generation."
          fi

      # 16. Temporäre Verzeichnisse entfernen
      - name: Remove temporary directories
        run: |
          rm -rf tmp/redaxo
          rm -rf setup
          find tmp -maxdepth 1 -type d -exec rm -rf {} +

      # 17. Pull Request erstellen
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          branch: redaxo-setup
          title: "Setup REDAXO structure"
          body: "Automatischer Setup der REDAXO Struktur"
          base: ${{ github.head_ref || github.ref_name }}
          commit-message: "Setup REDAXO structure"
